package com.ef.banner.usuarios.config;

import java.util.Date;

import org.springframework.stereotype.Component;

import com.ef.banner.usuarios.model.Usuario;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtUtil {
	private final String SECRET_KEY = "mi_clave_super_secreta_para_token_jwt_seguro123";

	public String generarToken(Usuario usuario) {
		return Jwts.builder().setSubject(usuario.getCorreo()).claim("id", usuario.getId())
				.claim("rol", usuario.getRol().name()).setIssuedAt(new Date())
				.setExpiration(new Date(System.currentTimeMillis() + 86400000))
				.signWith(Keys.hmacShaKeyFor(SECRET_KEY.getBytes()), SignatureAlgorithm.HS256).compact();
	}

	public Claims extraerClaims(String token) {
		return Jwts.parserBuilder().setSigningKey(Keys.hmacShaKeyFor(SECRET_KEY.getBytes())).build()
				.parseClaimsJws(token).getBody();
	}

	public String extraerCorreo(String token) {
		return extraerClaims(token).getSubject();
	}

	public boolean validarToken(String token) {
		return !extraerClaims(token).getExpiration().before(new Date());
	}

	public String generarTokenRecuperacion(String correo) {
		return Jwts.builder().setSubject(correo).setIssuedAt(new Date())
				.setExpiration(new Date(System.currentTimeMillis() + 10 * 60 * 1000)) // 10 minutos
				.signWith(Keys.hmacShaKeyFor(SECRET_KEY.getBytes()), SignatureAlgorithm.HS256).compact();
	}

	public String extraerRol(String token) {
		return extraerClaims(token).get("rol", String.class);
	}

}
