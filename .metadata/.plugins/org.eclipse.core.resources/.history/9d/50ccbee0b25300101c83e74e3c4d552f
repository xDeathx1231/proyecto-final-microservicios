package com.ef.banner.usuarios.service;

import java.util.List;
import java.util.Optional;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.ef.banner.usuarios.dto.BoletaPagoDTO;
import com.ef.banner.usuarios.dto.UserRegisterDTO;
import com.ef.banner.usuarios.dto.UsuarioDTO;
import com.ef.banner.usuarios.model.Usuario;
import com.ef.banner.usuarios.repository.UsuarioRepository;


import org.springframework.transaction.annotation.Transactional;


@Service
public class UsuarioService {

	@Autowired
	private UsuarioRepository repository;

	private final BCryptPasswordEncoder password = new BCryptPasswordEncoder();

	public Usuario registrarUsuarioDesdeDTO(UserRegisterDTO dto) {
		Usuario usuario = Usuario.builder().nombreCompleto(dto.getNombreCompleto()).correo(dto.getCorreo())
				.password(password.encode(dto.getPassword())).dni(dto.getDni())
				.fechaNacimiento(dto.getFechaNacimiento()).direccion(dto.getDireccion()).telefono(dto.getTelefono())
				.saldoDisponible(1000.0).rol(Usuario.Rol.ESTUDIANTE).build();

		return repository.save(usuario);
	}

	public Optional<Usuario> buscarPorId(Long id) {
		return repository.findById(id);
	}

	public Optional<Usuario> buscarPorCorreo(String correo) {
		return repository.findByCorreo(correo);
	}

	public List<Usuario> listarUsuarios() {
		return repository.findAll();
	}

	public boolean existeCorreo(String correo) {
		return repository.findByCorreo(correo).isPresent();
	}

	public Optional<Usuario> actualizarContacto(Long id, String correo, String telefono, String direccion) {
		Optional<Usuario> optionalUsuario = repository.findById(id);
		if (optionalUsuario.isPresent()) {
			Usuario usuario = optionalUsuario.get();
			usuario.setCorreo(correo);
			usuario.setTelefono(telefono);
			usuario.setDireccion(direccion);
			repository.save(usuario);
		}
		return optionalUsuario;
	}

	public Usuario guardar(Usuario usuario) {
		return repository.save(usuario);
	}

	public void cambiarPassword(Long id, String nuevaPassword) {
		repository.findById(id).ifPresent(usuario -> {
			usuario.setPassword(new BCryptPasswordEncoder().encode(nuevaPassword));
			repository.save(usuario);
		});
	}

	public void cambiarPasswordPorRecuperacion(Long id, String nuevaPassword) {
		Usuario usuario = repository.findById(id).orElseThrow(() -> new RuntimeException("Usuario no encontrado"));

		String nuevaPasswordEncriptada = password.encode(nuevaPassword);
		usuario.setPassword(nuevaPasswordEncriptada);

		repository.save(usuario);
	}

	public void actualizarSaldo(Long id, Double nuevoSaldo) {
		Usuario usuario = repository.findById(id).orElseThrow(() -> new RuntimeException("Usuario no encontrado"));
		usuario.setSaldoDisponible(nuevoSaldo);
		repository.save(usuario);
	}

	private UsuarioDTO toDTO(Usuario usuario) {
		UsuarioDTO dto = new UsuarioDTO();
		dto.setId(usuario.getId());
		dto.setNombreCompleto(usuario.getNombreCompleto());
		dto.setCorreo(usuario.getCorreo());
		dto.setSaldoDisponible(usuario.getSaldoDisponible());
		return dto;
	}

	@Transactional
	public UsuarioDTO recargarSaldo(Long id, Double monto) {
		Usuario usuario = repository.findById(id)
				.orElseThrow(() -> new RuntimeException("Usuario no encontrado con ID: " + id));

		if (usuario.getSaldoDisponible() == null) {
			usuario.setSaldoDisponible(0.0);
		}

		usuario.setSaldoDisponible(usuario.getSaldoDisponible() + monto);
		repository.save(usuario);

		return toDTO(usuario);
	}

	@Transactional
	public UsuarioDTO cambiarRol(Long id, String nuevoRol) {
		Usuario usuario = repository.findById(id).orElseThrow(() -> new RuntimeException("Usuario no encontrado"));

		try {
			usuario.setRol(Usuario.Rol.valueOf(nuevoRol.toUpperCase()));
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("Rol inválido. Opciones válidas: ESTUDIANTE, PROFESOR, ADMIN");
		}

		repository.save(usuario);
		return toDTO(usuario);
	}


	@Transactional(readOnly = true)
	public BoletaPagoDTO generarBoleta(Long usuarioId) {
		Usuario usuario = repository.findById(usuarioId)
				.orElseThrow(() -> new RuntimeException("Usuario no encontrado"));

		// Generar número aleatorio de 6 dígitos con ceros a la izquierda
		String numeroBoleta = String.format("%06d", new Random().nextInt(1000000));

		return BoletaPagoDTO.builder().numeroBoleta(numeroBoleta).nombreCompleto(usuario.getNombreCompleto())
				.dni(usuario.getDni()).fechaNacimiento(usuario.getFechaNacimiento()).correo(usuario.getCorreo())
				.rol(usuario.getRol().name()).build();
	}

}
