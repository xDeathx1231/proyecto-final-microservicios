package com.ef.banner.usuarios.config;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.ef.banner.usuarios.model.Usuario;
import com.ef.banner.usuarios.service.UsuarioService;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private UsuarioService usuarioService;

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		final String authHeader = request.getHeader("Authorization");

		if (authHeader != null && authHeader.startsWith("Bearer ")) {
			String token = authHeader.substring(7);

			// Verificar si el token tiene formato JWT válido
			if (token.split("\\.").length != 3) {
				System.out.println("❌ Token malformado: " + token);
				filterChain.doFilter(request, response);
				return;
			}

			if (jwtUtil.validarToken(token)) {
				String correo = jwtUtil.extraerCorreo(token);
				String rol = jwtUtil.extraerRol(token);
				var auth = new UsernamePasswordAuthenticationToken(correo, token,
						List.of(new SimpleGrantedAuthority("ROLE_" + rol)));
				SecurityContextHolder.getContext().setAuthentication(auth);
			}
		}

		filterChain.doFilter(request, response);
	}

}
